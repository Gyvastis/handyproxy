{"version":3,"sources":["components/Header/index.js","components/Footer/TwitterIcon.js","components/Footer/GitHubIcon.js","components/Footer/index.js","components/DocumentationHeader/index.js","components/DocumentationMiddle/index.js","components/ProxyList/index.js","components/Reason/index.js","components/Statistics/index.js","containers/Main/index.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","div","H1","h1","Description","span","Helmet","charSet","href","rel","role","aria-label","xmlns","xmlnsXlink","viewBox","version","width","height","id","style","fill","d","FooterWrapper","A","a","target","TwitterIcon","GitHubIcon","Code","code","DocumentationWrapper","dumpUrl","lastPingDate","dateString","Date","setTime","getTime","getTimezoneOffset","getFormattedDate","toISOString","JSON","stringify","ProxyListWrapper","SpeedCell","SpeedBarWrapper","SpeedBar","SpeedText","columns","Header","accessor","Cell","value","svg","styleProps","border","marginRight","Math","round","data","loading","className","pageSize","ReasonWrapper","H3","h3","P","Emoji","ul","p","getRainbowColors","numberOfItems","rainbow","Rainbow","setNumberRange","setSpectrum","colors","i","push","colourAt","countryMetadata","totalProxyCount","Object","values","proxy_count","map","count","parseInt","getTotalProxyCount","totalCountryCount","keys","country","getTotalCountryCount","labels","average_ping","datasets","backgroundColor","length","options","legend","display","title","text","MainWrapper","proxyDumpUrl","calculateProxyStats","proxies","proxyCountries","proxy","countryCode","indexOf","sort","proxyCountPerCountry","averagePingPerCountry","countryProxies","filter","responseTime","Main","props","state","meta","ReactGA","initialize","pageview","window","location","pathname","search","fetch","then","res","json","setState","commits","commit","author","date","this","DocumentationHeader","ProxyList","DocumentationMiddle","Statistics","Reason","Footer","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3310b124.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst HeaderWrapper = styled.div`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: #505050;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n  font-size: 52px;\r\n  margin-bottom: 0;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: #505050;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Description = styled.span`\r\n  font-size: 20px;\r\n  font-style: italic;\r\n`;\r\n\r\nexport default () => (\r\n  <HeaderWrapper>\r\n    <Helmet>\r\n      <meta charSet=\"utf-8\" />\r\n      <title>Fastest public proxies for your bots & scrapers | HandyProxy</title>\r\n      <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\"></link>\r\n    </Helmet>\r\n    <H1><span role='img' aria-label='promise-emoji'>🤞</span><a href='/'>HandyProxy</a></H1>\r\n    <Description>Fast, reliable, no nonsense public proxies</Description>\r\n  </HeaderWrapper>\r\n);\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 48 48\" version=\"1.1\" width=\"48px\" height=\"48px\">\r\n    <g id=\"surface1\">\r\n      <path style={{fill:'#03A9F4'}} d=\"M 42 12.429688 C 40.675781 13.015625 39.253906 13.40625 37.753906 13.589844 C 39.277344 12.683594 40.453125 11.238281 41.003906 9.53125 C 39.574219 10.371094 37.992188 10.984375 36.3125 11.308594 C 34.96875 9.882813 33.050781 9 30.925781 9 C 26.847656 9 23.539063 12.277344 23.539063 16.320313 C 23.539063 16.890625 23.605469 17.449219 23.730469 17.988281 C 17.59375 17.683594 12.148438 14.765625 8.507813 10.335938 C 7.867188 11.417969 7.507813 12.683594 7.507813 14.023438 C 7.507813 16.5625 8.808594 18.800781 10.792969 20.117188 C 9.582031 20.082031 8.441406 19.742188 7.445313 19.203125 C 7.445313 19.226563 7.445313 19.257813 7.445313 19.289063 C 7.445313 22.839844 9.992188 25.796875 13.367188 26.472656 C 12.75 26.640625 12.097656 26.734375 11.425781 26.734375 C 10.949219 26.734375 10.484375 26.679688 10.035156 26.597656 C 10.972656 29.5 13.699219 31.621094 16.933594 31.683594 C 14.402344 33.644531 11.21875 34.820313 7.757813 34.820313 C 7.160156 34.820313 6.574219 34.785156 5.996094 34.714844 C 9.269531 36.785156 13.152344 38 17.320313 38 C 30.90625 38 38.339844 26.84375 38.339844 17.164063 C 38.339844 16.847656 38.328125 16.53125 38.3125 16.222656 C 39.761719 15.195313 41.011719 13.90625 42 12.429688 \"/>\r\n    </g>\r\n  </svg>\r\n);\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\" version=\"1.1\" width=\"48px\" height=\"48px\">\r\n    <g id=\"surface1\">\r\n      <path style={{fill:'#303030'}} d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/>\r\n    </g>\r\n  </svg>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TwitterIcon from 'components/Footer/TwitterIcon';\r\nimport GitHubIcon from 'components/Footer/GitHubIcon';\r\n\r\nconst FooterWrapper = styled.div`\r\n  text-align: center;\r\n  border-top: 1px dashed #f1f1f1;\r\n  padding-top: 30px;\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst A = styled.a`\r\n  text-decoration: none;\r\n  color: inherit;\r\n  display: inline-block;\r\n`;\r\n\r\nexport default () => (\r\n  <FooterWrapper>\r\n    <A target='_blank' rel='nofollow' href='https://twitter.com/@VaidasBagdonas'><TwitterIcon /></A>\r\n    <A target='_blank' rel='nofollow' href='https://github.com/Gyvastis'><GitHubIcon /></A>\r\n    <br />\r\n    With ❤️<A target=\"_blank\" href=\"https://vaidasbagdonas.com\">Vaidas Bagdonas</A><br />\r\n    Amsterdam\r\n  </FooterWrapper>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Code = styled.code`\r\n  display: block;\r\n  background-color: #f1f1f1;\r\n  font-size: 13px;\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst DocumentationWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst getFormattedDate = dateString => {\r\n    const lastPingDate = new Date(dateString);\r\n    lastPingDate.setTime( lastPingDate.getTime() + lastPingDate.getTimezoneOffset()*60*1000 );\r\n\r\n    return lastPingDate;\r\n}\r\n\r\nexport default ({ dumpUrl, lastPingDate }) => (\r\n  <DocumentationWrapper>\r\n    <Code>GET <a href={ dumpUrl } target=\"_blank\">{ dumpUrl }</a></Code>\r\n    <Code>Last pinged at {getFormattedDate(lastPingDate).toISOString()}</Code>\r\n  </DocumentationWrapper>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Code = styled.code`\r\n  background-color: #f1f1f1;\r\n  font-size: 13px;\r\n`;\r\n\r\nconst DocumentationWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport default () => (\r\n  <DocumentationWrapper>\r\n    <p>Example output:</p>\r\n    <Code>{JSON.stringify([{\"ip\":\"109.70.189.75\",\"port\":\"60282\",\"country\":\"RU\",\"protocol\":\"https\",\"anonymity\":\"anonymous\",\"responseTime\":249,\"hideIp\":true}], null, \"\\t\")}</Code>\r\n    <p>\r\n      Proxy anonimity types:<br />\r\n      <Code>elite</Code> connection looks like a regular client<br />\r\n      <Code>anonymous</Code> no ip is forworded but target site could still tell it's a proxy<br />\r\n      <Code>transparent</Code> ip is forworded and target site would be able to tell it's a proxy<br />\r\n    </p>\r\n    <p>What I am most concerned is the response time, whether or not the proxy modified the content and is the IP being hidden. Having these points in mind, <b>proxies are checked few times a day</b>. </p>\r\n  </DocumentationWrapper>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ReactTable from 'react-table';\r\nimport { DateTime, Interval } from 'luxon';\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport 'react-table/react-table.css';\r\n\r\nconst ProxyListWrapper = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst SpeedCell = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst SpeedBarWrapper = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  text-align: left;\r\n  left: 0;\r\n  top: 0;\r\n  background: 0 0;\r\n`;\r\n\r\nconst SpeedBar = styled.span`\r\n  height: 20px;\r\n  display: inline-block;\r\n  z-index: 5;\r\n  background: ${({width}) => {\r\n    if(width > 70) {\r\n      return '#e00000';\r\n    }\r\n    else if(width > 30) {\r\n      return '#ffd500';\r\n    }\r\n    else {\r\n      return '#79bc00';\r\n    }\r\n  }};\r\n  width: ${({width}) => width}px;\r\n`;\r\n\r\nconst SpeedText = styled.span`\r\n  z-index: 1;\r\n  position: relative;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  padding: 2px 0 0 14px;\r\n`;\r\n\r\nconst maxPing = 6000;\r\n\r\nconst columns = [\r\n  {\r\n    Header: 'Country',\r\n    accessor: 'countryCode',\r\n    Cell: ({value}) => (\r\n      <span>\r\n        <ReactCountryFlag code={value} svg styleProps={{\r\n          border: '1px solid #f0f0f0',\r\n          marginRight: '5px'\r\n        }} />\r\n        {value}\r\n      </span>\r\n    ),\r\n    // width: 80,\r\n  },\r\n  {\r\n    Header: 'IP address',\r\n    accessor: 'ip',\r\n    // width: 180,\r\n  },\r\n  {\r\n    Header: 'Port',\r\n    accessor: 'port',\r\n    // width: 90,\r\n  },\r\n  {\r\n    Header: 'Protocol',\r\n    accessor: 'protocol',\r\n    // width: 110,\r\n  },\r\n  {\r\n    Header: 'Anonymity',\r\n    accessor: 'anonymity',\r\n    // width: 120,\r\n  },\r\n  {\r\n    Header: 'Ping',\r\n    accessor: 'responseTime',\r\n    // width: 100,\r\n    Cell: ({value}) => (\r\n      <SpeedCell>\r\n        <SpeedText>{value} ms</SpeedText>\r\n        <SpeedBarWrapper>\r\n          <SpeedBar width={Math.round(value * 100 / maxPing)} />\r\n        </SpeedBarWrapper>\r\n      </SpeedCell>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default ({ data, loading }) => (\r\n  <ProxyListWrapper>\r\n    <ReactTable\r\n      className='-striped -highlight'\r\n      loading={loading}\r\n      data={data}\r\n      columns={columns}\r\n      pageSize={10}\r\n    />\r\n  </ProxyListWrapper>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ReasonWrapper = styled.div``;\r\n\r\nconst H3 = styled.h3`\r\n  font-size: 18px;\r\n  font-style: italic;\r\n  text-align: center;\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst P = styled.div`\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  padding: 0 15px;\r\n`;\r\n\r\nconst List = styled.ul`\r\n`;\r\n\r\nconst Emoji = styled.span`\r\n  font-size: 24px;\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  font-style: normal;\r\n`;\r\n\r\nexport default () => (\r\n  <ReasonWrapper>\r\n    <H3>Motivation. The `why?`</H3>\r\n    <P>\r\n      While building bots, scrapers or any other automated piece software come across the same question time and time again.<br /><br />\r\n      <i>Where do I get some decent proxies for this? </i><Emoji role='img'>😩</Emoji><br /><br />\r\n      If it's a bigger gig you'd want to get private proxies but if it's just a side-gig, something just for fun then you're going through random places searching for those damn proxies, scraping, filtering and checking them.<br /><br />\r\n      I face this myself all the time and I'm happy to say <b>this is the last place we will ever need to go to for public proxies</b>! I'll do the tedious part of collecting, aggregating and checking the proxies.<br /><br />\r\n      Grab them and put them to work! <Emoji role='img'>🧨😁</Emoji> Let me know what's up on Twitter or GitHub!\r\n    </P>\r\n    {/*\r\n    <H3>The future is bright <Emoji role='img'>🥳</Emoji></H3>\r\n    <P>\r\n      <List>\r\n        <li>Checks agains Google, Facebook, etc</li>\r\n        <li>...and hopefully more!</li>\r\n      </List>\r\n    </P>\r\n    */}\r\n  </ReasonWrapper>\r\n);\r\n","import React from 'react';\r\nimport { Pie, Bar, Bubble } from 'react-chartjs-2';\r\nimport Rainbow from 'rainbowvis.js';\r\nimport styled from 'styled-components';\r\n\r\nconst H3 = styled.h3`\r\n  font-size: 18px;\r\n  font-style: italic;\r\n  text-align: center;\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst P = styled.p`\r\n  text-align: center;\r\n`;\r\n\r\nconst getRainbowColors = numberOfItems => {\r\n  if(numberOfItems <= 0) {\r\n    return [];\r\n  }\r\n\r\n  var rainbow = new Rainbow();\r\n  rainbow.setNumberRange(1, numberOfItems);\r\n  rainbow.setSpectrum('#F4CC70', '#DE7A22');\r\n\r\n  const colors = [];\r\n\r\n  for (var i = 1; i <= numberOfItems; i++) {\r\n      colors.push('#' + rainbow.colourAt(i));\r\n  }\r\n\r\n  return colors;\r\n}\r\n\r\nconst getTotalProxyCount = countryMetadata => {\r\n  let totalProxyCount = 0;\r\n\r\n  Object.values(countryMetadata.proxy_count).map(count => totalProxyCount+=parseInt(count));\r\n\r\n  return totalProxyCount;\r\n};\r\n\r\nconst getTotalCountryCount = countryMetadata => {\r\n  let totalCountryCount = 0;\r\n\r\n  Object.keys(countryMetadata.proxy_count).map(country => totalCountryCount++);\r\n\r\n  return totalCountryCount;\r\n}\r\n\r\nexport default ({ countryMetadata = {} }) => (\r\n  <div>\r\n    <H3>Sexy stats</H3>\r\n    <P>{getTotalProxyCount(countryMetadata)} proxies in {getTotalCountryCount(countryMetadata)} countries</P>\r\n    <Bar\r\n      data={{\r\n        labels: Object.keys(countryMetadata.average_ping),\r\n        datasets: [{\r\n          data: Object.values(countryMetadata.average_ping),\r\n          backgroundColor: getRainbowColors(Object.keys(countryMetadata.average_ping).length),\r\n        }]\r\n      }}\r\n      options={{\r\n        legend: {\r\n          display: false,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Average ping per country'\r\n        }\r\n      }}\r\n    />\r\n    <Bar\r\n      data={{\r\n        labels: Object.keys(countryMetadata.proxy_count),\r\n        datasets: [{\r\n          data: Object.values(countryMetadata.proxy_count),\r\n          backgroundColor: getRainbowColors(Object.keys(countryMetadata.proxy_count).length),\r\n        }]\r\n      }}\r\n      options={{\r\n        legend: {\r\n          display: false,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Proxy count per country'\r\n        }\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport fetch from 'node-fetch';\r\nimport 'normalize.css';\r\nimport ReactGA from 'react-ga';\r\nimport Header from 'components/Header';\r\nimport Footer from 'components/Footer';\r\nimport DocumentationHeader from 'components/DocumentationHeader';\r\nimport DocumentationMiddle from 'components/DocumentationMiddle';\r\nimport ProxyList from 'components/ProxyList';\r\nimport Reason from 'components/Reason';\r\nimport Statistics from 'components/Statistics';\r\n\r\nconst MainWrapper = styled.div`\r\n    margin: 50px auto;\r\n    width: 800px;\r\n`;\r\n\r\nconst proxyDumpUrl = 'https://raw.githubusercontent.com/Gyvastis/handyproxy-s3/master/proxies.json';\r\nconst fetchProxyData = () => fetch(proxyDumpUrl).then(res => res.json());\r\nconst fetchLastPingDate = () => fetch('https://api.github.com/repos/Gyvastis/handyproxy-s3/commits').then(res => res.json()).then(commits => commits[0].commit.author.date);\r\n\r\nconst calculateProxyStats = proxies => {\r\n  const proxyCountries = [];\r\n  proxies.map(proxy => {\r\n    if(proxy.countryCode && proxyCountries.indexOf(proxy.countryCode) < 0) {\r\n      proxyCountries.push(proxy.countryCode);\r\n    }\r\n  });\r\n  proxyCountries.sort();\r\n\r\n  let proxyCountPerCountry = {};\r\n  let averagePingPerCountry = {};\r\n  proxyCountries.map(countryCode => {\r\n    const countryProxies = proxies.filter(proxy => proxy.countryCode === countryCode);\r\n    proxyCountPerCountry[countryCode] = countryProxies.length;\r\n\r\n    averagePingPerCountry[countryCode] = 0;\r\n    countryProxies.map(proxy => averagePingPerCountry[countryCode] += proxy.responseTime);\r\n    averagePingPerCountry[countryCode] = averagePingPerCountry[countryCode] / proxyCountPerCountry[countryCode];\r\n  });\r\n\r\n  return {\r\n    average_ping: averagePingPerCountry,\r\n    proxy_count: proxyCountPerCountry\r\n  };\r\n};\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: [],\r\n      meta: {\r\n        average_ping: {},\r\n        proxy_count: {}\r\n      },\r\n      loading: true,\r\n      lastPingDate: null\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    ReactGA.initialize('UA-39991152-15');\r\n    ReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\n    fetchProxyData().then(proxies => {\r\n      this.setState({\r\n        ...this.state,\r\n        data: proxies,\r\n        loading: false\r\n      });\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        meta: calculateProxyStats(proxies),\r\n      });\r\n    });\r\n\r\n    fetchLastPingDate().then(lastPingDate => {\r\n      this.setState({\r\n        ...this.state,\r\n        lastPingDate,\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { data, meta, loading, lastPingDate } = this.state;\r\n\r\n    return (\r\n      <MainWrapper>\r\n        <Header />\r\n        <DocumentationHeader {...{ dumpUrl: proxyDumpUrl, lastPingDate }} />\r\n        <ProxyList {...{ data, loading }} />\r\n        <DocumentationMiddle />\r\n        <Statistics countryMetadata={meta} />\r\n        <Reason />\r\n        <Footer />\r\n      </MainWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}