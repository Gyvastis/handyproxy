{"version":3,"sources":["components/Header/index.js","components/Footer/TwitterIcon.js","components/Footer/GitHubIcon.js","components/Footer/index.js","components/DocumentationHeader/index.js","components/DocumentationMiddle/index.js","components/ProxyList/index.js","components/Reason/index.js","components/Statistics/index.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderWrapper","styled","div","H1","h1","Description","span","Helmet","charSet","href","rel","role","aria-label","xmlns","xmlnsXlink","viewBox","version","width","height","id","style","fill","d","FooterWrapper","A","a","target","TwitterIcon","GitHubIcon","Code","code","DocumentationWrapper","dumpUrl","lastPingDate","Math","round","DateTime","now","diff","fromISO","minutes","JSON","stringify","ProxyListWrapper","SpeedCell","SpeedBarWrapper","SpeedBar","SpeedText","columns","Header","accessor","Cell","value","countryCode","svg","border","marginRight","ProxyList","data","isLoading","className","loading","pageSize","ReasonWrapper","H3","h3","P","Emoji","ul","p","getTotalProxyCount","countryMetadata","totalProxyCount","Object","values","proxy_count","map","count","parseInt","getTotalCountryCount","totalCountryCount","keys","country","color","title","size","valueSuffix","average_ping","toLowerCase","MainWrapper","proxyDumpUrl","App","useState","setData","meta","setMeta","setIsLoading","setLastPingDate","useEffect","fetch","then","res","json","proxies","proxyCountries","proxy","indexOf","push","sort","proxyCountPerCountry","averagePingPerCountry","countryProxies","filter","length","responseTime","calculateProxyStats","commits","commit","author","date","DocumentationHeader","DocumentationMiddle","Statistics","Reason","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.852f79a9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Helmet } from 'react-helmet';\n\nconst HeaderWrapper = styled.div`\n  text-align: center;\n  font-weight: bold;\n  color: #505050;\n  margin-bottom: 20px;\n`;\n\nconst H1 = styled.h1`\n  font-size: 52px;\n  margin-bottom: 0;\n\n  a {\n    text-decoration: none;\n    color: #505050;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst Description = styled.span`\n  font-size: 20px;\n  font-style: italic;\n`;\n\nexport default () => (\n  <HeaderWrapper>\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>Fastest public proxies for your bots & scrapers | HandyProxy</title>\n      <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\"></link>\n    </Helmet>\n    <H1><span role='img' aria-label='promise-emoji'>🤞</span><a href='/'>HandyProxy</a></H1>\n    <Description>Fast, reliable, no nonsense public proxies</Description>\n  </HeaderWrapper>\n);\n","import React from 'react';\n\nexport default () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 48 48\" version=\"1.1\" width=\"48px\" height=\"48px\">\n    <g id=\"surface1\">\n      <path style={{fill:'#03A9F4'}} d=\"M 42 12.429688 C 40.675781 13.015625 39.253906 13.40625 37.753906 13.589844 C 39.277344 12.683594 40.453125 11.238281 41.003906 9.53125 C 39.574219 10.371094 37.992188 10.984375 36.3125 11.308594 C 34.96875 9.882813 33.050781 9 30.925781 9 C 26.847656 9 23.539063 12.277344 23.539063 16.320313 C 23.539063 16.890625 23.605469 17.449219 23.730469 17.988281 C 17.59375 17.683594 12.148438 14.765625 8.507813 10.335938 C 7.867188 11.417969 7.507813 12.683594 7.507813 14.023438 C 7.507813 16.5625 8.808594 18.800781 10.792969 20.117188 C 9.582031 20.082031 8.441406 19.742188 7.445313 19.203125 C 7.445313 19.226563 7.445313 19.257813 7.445313 19.289063 C 7.445313 22.839844 9.992188 25.796875 13.367188 26.472656 C 12.75 26.640625 12.097656 26.734375 11.425781 26.734375 C 10.949219 26.734375 10.484375 26.679688 10.035156 26.597656 C 10.972656 29.5 13.699219 31.621094 16.933594 31.683594 C 14.402344 33.644531 11.21875 34.820313 7.757813 34.820313 C 7.160156 34.820313 6.574219 34.785156 5.996094 34.714844 C 9.269531 36.785156 13.152344 38 17.320313 38 C 30.90625 38 38.339844 26.84375 38.339844 17.164063 C 38.339844 16.847656 38.328125 16.53125 38.3125 16.222656 C 39.761719 15.195313 41.011719 13.90625 42 12.429688 \"/>\n    </g>\n  </svg>\n);\n","import React from 'react';\n\nexport default () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\" version=\"1.1\" width=\"48px\" height=\"48px\">\n    <g id=\"surface1\">\n      <path style={{fill:'#303030'}} d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/>\n    </g>\n  </svg>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TwitterIcon from './TwitterIcon';\nimport GitHubIcon from './GitHubIcon';\n\nconst FooterWrapper = styled.div`\n  text-align: center;\n  border-top: 1px dashed #f1f1f1;\n  padding-top: 30px;\n  margin-top: 30px;\n`;\n\nconst A = styled.a`\n  text-decoration: none;\n  color: inherit;\n  display: inline-block;\n`;\n\nexport default () => (\n  <FooterWrapper>\n    <A target='_blank' rel='nofollow' href='https://twitter.com/@VaidasBagdonas'><TwitterIcon /></A>\n    <A target='_blank' rel='nofollow' href='https://github.com/HandyProxy'><GitHubIcon /></A>\n    <br />\n    With ❤️ <A target=\"_blank\" href=\"https://vaidasbagdonas.com\">Vaidas</A><br />Amsterdam\n  </FooterWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport DateTime from 'luxon/src/datetime';\n\nconst Code = styled.code`\n  display: block;\n  background-color: #f1f1f1;\n  font-size: 13px;\n  margin-bottom: 3px;\n`;\n\nconst DocumentationWrapper = styled.div`\n  text-align: center;\n`;\n\nexport default ({ dumpUrl, lastPingDate }) => (\n  <DocumentationWrapper>\n    <Code>GET <a href={ dumpUrl } target=\"_blank\">{ dumpUrl }</a></Code>\n    <Code>Proxies last pinged {lastPingDate ? Math.round(DateTime.now().diff(DateTime.fromISO(lastPingDate), 'minutes').minutes) : '?'} minutes ago</Code>\n  </DocumentationWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Code = styled.code`\n  background-color: #f1f1f1;\n  font-size: 13px;\n`;\n\nconst DocumentationWrapper = styled.div`\n  text-align: center;\n`;\n\nexport default () => (\n  <DocumentationWrapper>\n    <p>Example output:</p>\n    <Code>{JSON.stringify([{\"ip\":\"109.70.189.75\",\"port\":\"60282\",\"countryCode\":\"RU\",\"protocol\":\"https\",\"anonymity\":\"anonymous\",\"responseTime\":249,\"hideIp\":true}], null, \"\\t\")}</Code>\n    <p>\n      Proxy anonimity types:<br />\n      <Code>elite</Code> connection looks like a regular client<br />\n      <Code>anonymous</Code> no ip is forworded but target site could still tell it's a proxy<br />\n      <Code>transparent</Code> ip is forworded and target site would be able to tell it's a proxy<br />\n    </p>\n    <p>What I am most concerned is the response time, whether or not the proxy modified the content and is the IP being hidden. Having these points in mind, <b>proxies are checked few times a day</b>. </p>\n  </DocumentationWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport ReactTable from 'react-table';\nimport ReactCountryFlag from \"react-country-flag\";\nimport 'react-table/react-table.css';\n\nconst ProxyListWrapper = styled.div`\n  margin: 20px 0;\n`;\n\nconst SpeedCell = styled.div`\n  position: relative;\n`;\n\nconst SpeedBarWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  text-align: left;\n  left: 0;\n  top: 0;\n  background: 0 0;\n`;\n\nconst SpeedBar = styled.span`\n  height: 20px;\n  display: inline-block;\n  z-index: 5;\n  background: ${({width}) => {\n    if(width > 70) {\n      return '#e00000';\n    }\n    else if(width > 30) {\n      return '#ffd500';\n    }\n    else {\n      return '#79bc00';\n    }\n  }};\n  width: ${({width}) => width}px;\n`;\n\nconst SpeedText = styled.span`\n  z-index: 1;\n  position: relative;\n  display: inline-block;\n  font-size: 14px;\n  padding: 2px 0 0 14px;\n`;\n\nconst maxPing = 6000;\nconst columns = [\n  {\n    Header: 'Country',\n    accessor: 'countryCode',\n    Cell: ({value}) => (\n      <span>\n        <ReactCountryFlag countryCode={value} svg style={{\n          border: '1px solid #f0f0f0',\n          marginRight: '5px'\n        }} />\n        {value}\n      </span>\n    ),\n    // width: 80,\n  },\n  {\n    Header: 'IP address',\n    accessor: 'ip',\n    // width: 180,\n  },\n  {\n    Header: 'Port',\n    accessor: 'port',\n    // width: 90,\n  },\n  {\n    Header: 'Protocol',\n    accessor: 'protocol',\n    // width: 110,\n  },\n  {\n    Header: 'Anonymity',\n    accessor: 'anonymity',\n    // width: 120,\n  },\n  {\n    Header: 'Ping',\n    accessor: 'responseTime',\n    // width: 100,\n    Cell: ({value}) => (\n      <SpeedCell>\n        <SpeedText>{value} ms</SpeedText>\n        <SpeedBarWrapper>\n          <SpeedBar width={Math.round(value * 100 / maxPing)} />\n        </SpeedBarWrapper>\n      </SpeedCell>\n    ),\n  },\n];\n\nfunction ProxyList({ data, isLoading }) {\n  return (\n    <ProxyListWrapper>\n      <ReactTable\n        className='-striped -highlight'\n        loading={isLoading}\n        data={data}\n        columns={columns}\n        pageSize={10}\n      />\n    </ProxyListWrapper>\n  )\n};\n\nexport default ProxyList;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReasonWrapper = styled.div``;\n\nconst H3 = styled.h3`\n  font-size: 18px;\n  font-style: italic;\n  text-align: center;\n  margin-top: 30px;\n`;\n\nconst P = styled.div`\n  font-size: 16px;\n  line-height: 24px;\n  padding: 0 15px;\n`;\n\nconst List = styled.ul`\n`;\n\nconst Emoji = styled.span`\n  font-size: 24px;\n  display: inline-block;\n  margin-left: 5px;\n  font-style: normal;\n`;\n\nexport default () => (\n  <ReasonWrapper>\n    <H3>Motivation. The `why?`</H3>\n    <P>\n      While building bots, scrapers or any other automated piece software come across the same question time and time again.<br /><br />\n      <i>Where do I get some decent proxies for this? </i><Emoji role='img'>😩</Emoji><br /><br />\n      If it's a bigger gig you'd want to get private proxies but if it's just a side-gig, something just for fun then you're going through random places searching for those damn proxies, scraping, filtering and checking them.<br /><br />\n      I face this myself all the time and I'm happy to say <b>this is the last place we will ever need to go to for public proxies</b>! I'll do the tedious part of collecting, aggregating and checking the proxies.<br /><br />\n      Grab them and put them to work! <Emoji role='img'>🧨😁</Emoji> Let me know what's up on Twitter or GitHub!\n    </P>\n    {/*\n    <H3>The future is bright <Emoji role='img'>🥳</Emoji></H3>\n    <P>\n      <List>\n        <li>Checks agains Google, Facebook, etc</li>\n        <li>...and hopefully more!</li>\n      </List>\n    </P>\n    */}\n  </ReasonWrapper>\n);\n","import React from 'react';\nimport { WorldMap } from \"react-svg-worldmap\"\nimport styled from 'styled-components';\n\nconst H3 = styled.h3`\n  font-size: 18px;\n  font-style: italic;\n  text-align: center;\n  margin-top: 30px;\n`;\n\nconst P = styled.p`\n  text-align: center;\n`;\n\nconst getTotalProxyCount = (countryMetadata = {}) => {\n  let totalProxyCount = 0;\n\n  Object.values(countryMetadata.proxy_count).map(count => totalProxyCount+=parseInt(count));\n\n  return totalProxyCount;\n};\n\nconst getTotalCountryCount = countryMetadata => {\n  let totalCountryCount = 0;\n\n  Object.keys(countryMetadata.proxy_count).map(country => totalCountryCount++);\n\n  return totalCountryCount;\n}\n\nexport default ({ countryMetadata = {} }) => (\n  <div style={{width: \"100%\"}}>\n    <H3>Stats</H3>\n    <P>{getTotalProxyCount(countryMetadata)} proxies in {getTotalCountryCount(countryMetadata)} countries</P>\n    <WorldMap color=\"red\" title=\"Average ping\" size=\"xl\" valueSuffix=\"ms\" data={Object.keys(countryMetadata.average_ping).map(country => ({\n      country: country.toLowerCase(),\n      value: Math.round(countryMetadata.average_ping[country])\n    }))} />\n    <WorldMap color=\"green\" title=\"Proxy count\" size=\"xl\" data={Object.keys(countryMetadata.proxy_count).map(country => ({\n      country: country.toLowerCase(),\n      value: Math.round(countryMetadata.proxy_count[country])\n    }))} />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport fetch from 'node-fetch';\nimport 'normalize.css';\nimport ReactGA from 'react-ga';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport DocumentationHeader from './components/DocumentationHeader';\nimport DocumentationMiddle from './components/DocumentationMiddle';\nimport ProxyList from './components/ProxyList';\nimport Reason from './components/Reason';\nimport Statistics from './components/Statistics';\n\nconst MainWrapper = styled.div`\n    margin: 50px auto;\n    width: 800px;\n`;\n\nconst proxyDumpUrl = 'https://raw.githubusercontent.com/HandyProxy/node-proxy-checker/master/output/output.json';\nconst fetchProxyData = () => fetch(proxyDumpUrl).then(res => res.json());\nconst fetchLastPingDate = () => fetch('https://api.github.com/repos/HandyProxy/node-proxy-checker/commits').then(res => res.json()).then(commits => commits[0].commit.author.date);\n\nconst calculateProxyStats = proxies => {\n  const proxyCountries = [];\n  proxies.map(proxy => {\n    if(proxy.countryCode && proxyCountries.indexOf(proxy.countryCode) < 0) {\n      proxyCountries.push(proxy.countryCode);\n    }\n  });\n  proxyCountries.sort();\n\n  let proxyCountPerCountry = {};\n  let averagePingPerCountry = {};\n  proxyCountries.map(countryCode => {\n    const countryProxies = proxies.filter(proxy => proxy.countryCode === countryCode);\n    proxyCountPerCountry[countryCode] = countryProxies.length;\n\n    averagePingPerCountry[countryCode] = 0;\n    countryProxies.map(proxy => averagePingPerCountry[countryCode] += proxy.responseTime);\n    averagePingPerCountry[countryCode] = averagePingPerCountry[countryCode] / proxyCountPerCountry[countryCode];\n  });\n\n  return {\n    average_ping: averagePingPerCountry,\n    proxy_count: proxyCountPerCountry\n  };\n};\n\nfunction App() {\n  const [ data, setData ] = useState([]);\n  const [ meta, setMeta ] = useState({\n    average_ping: {},\n    proxy_count: {}\n  });\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ lastPingDate, setLastPingDate ] = useState(null);\n  \n  useEffect(() => {\n    // ReactGA.initialize('UA-39991152-15');\n    // ReactGA.pageview(window.location.pathname + window.location.search);\n    setIsLoading(true);\n\n    fetchProxyData().then(proxies => {\n      setData(proxies);\n      setIsLoading(false);\n      setMeta(calculateProxyStats(proxies));\n    });\n\n    fetchLastPingDate().then(setLastPingDate)\n  }, []);\n \n  return (\n    <MainWrapper>\n      <Header />\n      <DocumentationHeader {...{ dumpUrl: proxyDumpUrl, lastPingDate }} />\n      <ProxyList {...{ data, isLoading }} />\n      <DocumentationMiddle />\n      <Statistics countryMetadata={meta} />\n      <Reason />\n      <Footer />\n    </MainWrapper>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}