{"version":3,"sources":["components/Header/index.js","components/Footer/TwitterIcon.js","components/Footer/index.js","components/DocumentationHeader/index.js","components/DocumentationMiddle/index.js","components/ProxyList/index.js","components/Reason/index.js","components/Statistics/index.js","containers/Main/index.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","div","H1","h1","Description","span","Helmet","charSet","href","rel","role","aria-label","xmlns","xmlnsXlink","viewBox","version","width","height","id","style","fill","d","FooterWrapper","A","a","target","TwitterIcon","Code","code","DocumentationWrapper","JSON","stringify","ProxyListWrapper","SpeedCell","SpeedBarWrapper","SpeedBar","SpeedText","columns","Header","accessor","Cell","value","svg","styleProps","border","marginRight","Math","round","data","loading","className","pageSize","ReasonWrapper","H3","h3","P","Emoji","ul","p","getRainbowColors","numberOfItems","rainbow","Rainbow","setNumberRange","setSpectrum","colors","i","push","colourAt","countryMetadata","totalProxyCount","Object","values","proxy_count","map","count","parseInt","getTotalProxyCount","totalCountryCount","keys","country","getTotalCountryCount","labels","average_ping","datasets","backgroundColor","length","options","legend","display","title","text","MainWrapper","proxyDumpUrl","test","document","location","calculateProxyStats","proxies","proxyCountries","proxy","countryCode","indexOf","sort","proxyCountPerCountry","averagePingPerCountry","countryProxies","filter","responseTime","Main","props","state","meta","ReactGA","initialize","pageview","window","pathname","search","fetch","then","res","json","setState","this","DocumentationHeader","ProxyList","DocumentationMiddle","Statistics","Reason","Footer","React","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.774641ed.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Helmet } from 'react-helmet';\n\nconst HeaderWrapper = styled.div`\n  text-align: center;\n  font-weight: bold;\n  color: #505050;\n  margin-bottom: 20px;\n`;\n\nconst H1 = styled.h1`\n  font-size: 52px;\n  margin-bottom: 0;\n\n  a {\n    text-decoration: none;\n    color: #505050;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst Description = styled.span`\n  font-size: 20px;\n  font-style: italic;\n`;\n\nexport default () => (\n  <HeaderWrapper>\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>Fastest public proxies for your bots & scrapers | HandyProxy.io</title>\n      <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\"></link>\n    </Helmet>\n    <H1><span role='img' aria-label='promise-emoji'>ü§û</span><a href='/'>HandyProxy.io</a></H1>\n    <Description>Fast, reliable, no nonsense public proxies</Description>\n  </HeaderWrapper>\n);\n","import React from 'react';\n\nexport default () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 48 48\" version=\"1.1\" width=\"48px\" height=\"48px\">\n    <g id=\"surface1\">\n      <path style={{fill:'#03A9F4'}} d=\"M 42 12.429688 C 40.675781 13.015625 39.253906 13.40625 37.753906 13.589844 C 39.277344 12.683594 40.453125 11.238281 41.003906 9.53125 C 39.574219 10.371094 37.992188 10.984375 36.3125 11.308594 C 34.96875 9.882813 33.050781 9 30.925781 9 C 26.847656 9 23.539063 12.277344 23.539063 16.320313 C 23.539063 16.890625 23.605469 17.449219 23.730469 17.988281 C 17.59375 17.683594 12.148438 14.765625 8.507813 10.335938 C 7.867188 11.417969 7.507813 12.683594 7.507813 14.023438 C 7.507813 16.5625 8.808594 18.800781 10.792969 20.117188 C 9.582031 20.082031 8.441406 19.742188 7.445313 19.203125 C 7.445313 19.226563 7.445313 19.257813 7.445313 19.289063 C 7.445313 22.839844 9.992188 25.796875 13.367188 26.472656 C 12.75 26.640625 12.097656 26.734375 11.425781 26.734375 C 10.949219 26.734375 10.484375 26.679688 10.035156 26.597656 C 10.972656 29.5 13.699219 31.621094 16.933594 31.683594 C 14.402344 33.644531 11.21875 34.820313 7.757813 34.820313 C 7.160156 34.820313 6.574219 34.785156 5.996094 34.714844 C 9.269531 36.785156 13.152344 38 17.320313 38 C 30.90625 38 38.339844 26.84375 38.339844 17.164063 C 38.339844 16.847656 38.328125 16.53125 38.3125 16.222656 C 39.761719 15.195313 41.011719 13.90625 42 12.429688 \"/>\n    </g>\n  </svg>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TwitterIcon from 'components/Footer/TwitterIcon';\n\nconst FooterWrapper = styled.div`\n  text-align: center;\n  border-top: 1px dashed #f1f1f1;\n  padding-top: 30px;\n  margin-top: 30px;\n`;\n\nconst A = styled.a`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport default () => (\n  <FooterWrapper>\n    <a target='_blank' rel='nofollow' href='https://twitter.com/@VaidasBagdonas'><TwitterIcon /></a>\n    <br />\n    With ‚ù§Ô∏è<A target=\"_blank\" href=\"https://vaidasbagdonas.com\">Vaidas Bagdonas</A><br />\n    Amsterdam\n  </FooterWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Code = styled.code`\n  background-color: #f1f1f1;\n  font-size: 13px;\n`;\n\nconst DocumentationWrapper = styled.div`\n  text-align: center;\n`;\n\nexport default () => (\n  <DocumentationWrapper>\n    <Code>GET https://handyproxy-proxies.s3.eu-central-1.amazonaws.com/proxies.json</Code>\n  </DocumentationWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Code = styled.code`\n  background-color: #f1f1f1;\n  font-size: 13px;\n`;\n\nconst DocumentationWrapper = styled.div`\n  text-align: center;\n`;\n\nexport default () => (\n  <DocumentationWrapper>\n    <p>Example output:</p>\n    <Code>{JSON.stringify([{\"ip\":\"109.70.189.75\",\"port\":\"60282\",\"country\":\"RU\",\"protocol\":\"https\",\"anonymity\":\"anonymous\",\"responseTime\":249,\"hideIp\":true}], null, \"\\t\")}</Code>\n    <p>\n      Proxy anonimity types:<br />\n      <Code>elite</Code> connection looks like a regular client<br />\n      <Code>anonymous</Code> no ip is forworded but target site could still tell it's a proxy<br />\n      <Code>transparent</Code> ip is forworded and target site would be able to tell it's a proxy<br />\n    </p>\n    <p>What I am most concerned is the response time, whether or not the proxy modified the content and is the IP being hidden. Having these points in mind, <b>proxies are checked few times a day</b>. </p>\n  </DocumentationWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport ReactTable from 'react-table';\nimport { DateTime, Interval } from 'luxon';\nimport ReactCountryFlag from \"react-country-flag\";\nimport 'react-table/react-table.css';\n\nconst ProxyListWrapper = styled.div`\n  margin: 20px 0;\n`;\n\nconst SpeedCell = styled.div`\n  position: relative;\n`;\n\nconst SpeedBarWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  text-align: left;\n  left: 0;\n  top: 0;\n  background: 0 0;\n`;\n\nconst SpeedBar = styled.span`\n  height: 20px;\n  display: inline-block;\n  z-index: 5;\n  background: ${({width}) => {\n    if(width > 70) {\n      return '#e00000';\n    }\n    else if(width > 30) {\n      return '#ffd500';\n    }\n    else {\n      return '#79bc00';\n    }\n  }};\n  width: ${({width}) => width}px;\n`;\n\nconst SpeedText = styled.span`\n  z-index: 1;\n  position: relative;\n  display: inline-block;\n  font-size: 14px;\n  padding: 2px 0 0 14px;\n`;\n\nconst maxPing = 6000;\n\nconst columns = [\n  {\n    Header: 'Country',\n    accessor: 'countryCode',\n    Cell: ({value}) => (\n      <span>\n        <ReactCountryFlag code={value} svg styleProps={{\n          border: '1px solid #f0f0f0',\n          marginRight: '5px'\n        }} />\n        {value}\n      </span>\n    ),\n    // width: 80,\n  },\n  {\n    Header: 'IP address',\n    accessor: 'ip',\n    // width: 180,\n  },\n  {\n    Header: 'Port',\n    accessor: 'port',\n    // width: 90,\n  },\n  {\n    Header: 'Protocol',\n    accessor: 'protocol',\n    // width: 110,\n  },\n  {\n    Header: 'Anonymity',\n    accessor: 'anonymity',\n    // width: 120,\n  },\n  {\n    Header: 'Ping',\n    accessor: 'responseTime',\n    // width: 100,\n    Cell: ({value}) => (\n      <SpeedCell>\n        <SpeedText>{value} ms</SpeedText>\n        <SpeedBarWrapper>\n          <SpeedBar width={Math.round(value * 100 / maxPing)} />\n        </SpeedBarWrapper>\n      </SpeedCell>\n    ),\n  },\n];\n\nexport default ({ data, loading }) => (\n  <ProxyListWrapper>\n    <ReactTable\n      className='-striped -highlight'\n      loading={loading}\n      data={data}\n      columns={columns}\n      pageSize={10}\n    />\n  </ProxyListWrapper>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ReasonWrapper = styled.div``;\n\nconst H3 = styled.h3`\n  font-size: 18px;\n  font-style: italic;\n  text-align: center;\n  margin-top: 30px;\n`;\n\nconst P = styled.div`\n  font-size: 16px;\n  line-height: 24px;\n  padding: 0 15px;\n`;\n\nconst List = styled.ul`\n`;\n\nconst Emoji = styled.span`\n  font-size: 24px;\n  display: inline-block;\n  margin-left: 5px;\n  font-style: normal;\n`;\n\nexport default () => (\n  <ReasonWrapper>\n    <H3>Motivation. The `why?`</H3>\n    <P>\n      While building bots, scrapers or any other automated piece software come across the same question time and time again.<br /><br />\n      <i>Where do I get some decent proxies for this? </i><Emoji role='img'>üò©</Emoji><br /><br />\n      If it's a bigger gig you'd want to get private proxies but if it's just a side-gig, something just for fun then you're going through random places searching for those damn proxies, scraping, filtering and checking them.<br /><br />\n      I face this myself all the time and I'm happy to say <b>this is the last place we will ever need to go to for public proxies</b>! I'll do the tedious part of collecting, aggregating and checking the proxies.<br /><br />\n      Grab them and put them to work! <Emoji role='img'>üß®üòÅ</Emoji> Let me know what's up on Twitter or GitHub!\n    </P>\n    {/*\n    <H3>The future is bright <Emoji role='img'>ü•≥</Emoji></H3>\n    <P>\n      <List>\n        <li>Checks agains Google, Facebook, etc</li>\n        <li>...and hopefully more!</li>\n      </List>\n    </P>\n    */}\n  </ReasonWrapper>\n);\n","import React from 'react';\nimport { Pie, Bar, Bubble } from 'react-chartjs-2';\nimport Rainbow from 'rainbowvis.js';\nimport styled from 'styled-components';\n\nconst H3 = styled.h3`\n  font-size: 18px;\n  font-style: italic;\n  text-align: center;\n  margin-top: 30px;\n`;\n\nconst P = styled.p`\n  text-align: center;\n`;\n\nconst getRainbowColors = numberOfItems => {\n  if(numberOfItems <= 0) {\n    return [];\n  }\n\n  var rainbow = new Rainbow();\n  rainbow.setNumberRange(1, numberOfItems);\n  rainbow.setSpectrum('#F4CC70', '#DE7A22');\n\n  const colors = [];\n\n  for (var i = 1; i <= numberOfItems; i++) {\n      colors.push('#' + rainbow.colourAt(i));\n  }\n\n  return colors;\n}\n\nconst getTotalProxyCount = countryMetadata => {\n  let totalProxyCount = 0;\n\n  Object.values(countryMetadata.proxy_count).map(count => totalProxyCount+=parseInt(count));\n\n  return totalProxyCount;\n};\n\nconst getTotalCountryCount = countryMetadata => {\n  let totalCountryCount = 0;\n\n  Object.keys(countryMetadata.proxy_count).map(country => totalCountryCount++);\n\n  return totalCountryCount;\n}\n\nexport default ({ countryMetadata = {} }) => (\n  <div>\n    <H3>Sexy stats</H3>\n    <P>{getTotalProxyCount(countryMetadata)} proxies in {getTotalCountryCount(countryMetadata)} countries</P>\n    <Bar\n      data={{\n        labels: Object.keys(countryMetadata.average_ping),\n        datasets: [{\n          data: Object.values(countryMetadata.average_ping),\n          backgroundColor: getRainbowColors(Object.keys(countryMetadata.average_ping).length),\n        }]\n      }}\n      options={{\n        legend: {\n          display: false,\n        },\n        title: {\n            display: true,\n            text: 'Average ping per country'\n        }\n      }}\n    />\n    <Bar\n      data={{\n        labels: Object.keys(countryMetadata.proxy_count),\n        datasets: [{\n          data: Object.values(countryMetadata.proxy_count),\n          backgroundColor: getRainbowColors(Object.keys(countryMetadata.proxy_count).length),\n        }]\n      }}\n      options={{\n        legend: {\n          display: false,\n        },\n        title: {\n            display: true,\n            text: 'Proxy count per country'\n        }\n      }}\n    />\n  </div>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport fetch from 'node-fetch';\nimport 'normalize.css';\nimport ReactGA from 'react-ga';\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\nimport DocumentationHeader from 'components/DocumentationHeader';\nimport DocumentationMiddle from 'components/DocumentationMiddle';\nimport ProxyList from 'components/ProxyList';\nimport Reason from 'components/Reason';\nimport Statistics from 'components/Statistics';\n\nconst MainWrapper = styled.div`\n    margin: 50px auto;\n    width: 800px;\n`;\n\nconst proxyDumpUrl = /http:\\/\\/localhost/.test(document.location.href) ? 'http://localhost:3000/proxies.json' : 'https://handyproxy-proxies.s3.eu-central-1.amazonaws.com/proxies.json';\nconst fetchProxyData = () => fetch(proxyDumpUrl).then(res => res.json());\n\nconst calculateProxyStats = proxies => {\n  const proxyCountries = [];\n  proxies.map(proxy => {\n    if(proxy.countryCode && proxyCountries.indexOf(proxy.countryCode) < 0) {\n      proxyCountries.push(proxy.countryCode);\n    }\n  });\n  proxyCountries.sort();\n\n  let proxyCountPerCountry = {};\n  let averagePingPerCountry = {};\n  proxyCountries.map(countryCode => {\n    const countryProxies = proxies.filter(proxy => proxy.countryCode === countryCode);\n    proxyCountPerCountry[countryCode] = countryProxies.length;\n\n    averagePingPerCountry[countryCode] = 0;\n    countryProxies.map(proxy => averagePingPerCountry[countryCode] += proxy.responseTime);\n    averagePingPerCountry[countryCode] = averagePingPerCountry[countryCode] / proxyCountPerCountry[countryCode];\n  });\n\n  return {\n    average_ping: averagePingPerCountry,\n    proxy_count: proxyCountPerCountry\n  };\n};\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      meta: {\n        average_ping: {},\n        proxy_count: {}\n      },\n      loading: true\n    };\n  }\n\n  componentWillMount() {\n    ReactGA.initialize('UA-39991152-15');\n    ReactGA.pageview(window.location.pathname + window.location.search);\n\n    fetchProxyData().then(proxies => {\n      this.setState({\n        ...this.state,\n        data: proxies,\n        loading: false\n      });\n\n      this.setState({\n        ...this.state,\n        meta: calculateProxyStats(proxies),\n      });\n    });\n  }\n\n  render() {\n    const { data, meta, loading } = this.state;\n\n    return (\n      <MainWrapper>\n        <Header />\n        <DocumentationHeader />\n        <ProxyList data={data} loading={loading} />\n        <DocumentationMiddle />\n        <Statistics countryMetadata={meta} />\n        <Reason />\n        <Footer />\n      </MainWrapper>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}